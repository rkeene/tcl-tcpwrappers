TCP Wrappers Manipulation and Interogation Package

==============================================================================
USAGE ========================================================================
==============================================================================
1. Including this package
	SYNOPSIS
		package require tcpwrappers

	DESCRIPTION
		Loads this package

	RETURN VALUE
		The "package" command will return the version of the
		tcpwrappers package loaded

2. Checking for a Matching Service
	SYNOPSIS
		::tcpwrappers::check <service> <ip> [<allowFile> [<denyFile>]]

	DESCRIPTION
		This procedure will check the specified "allowFile" for an
		entry that will match the specified "service" and "ip".
		Service wildcard and address pattern matching rules are
		obeyed.  If not found it will then search the "denyFile".  If
		still not found the default value ("ALLOW") will be returned.

	RETURN VALUE
		This procedure will return "ALLOW" or "DENY" depending upon
		which file (if any) the service and ip combination were found.

	EXAMPLE
		proc checkIncomingConnection {ip} {
			set canSSH [::tcpwrappers::check "sshd" $ip]
			if {$canSSH != "ALLOW"} {
				return 0
			}

			return 1
		}

3. Concise Summary of File
	SYNOPSIS
		::tcpwrappers::summarize <file>

	DESCRIPTION
		This procedure reads in a properly formatted file and returns a
		list, where each element represents a line in a functionally
		equivelent file.  This can be used to provide a concise
		representation of a file for user verification.

	RETURN VALUE
		A list representing lines from a concise summary of the input
		file.

	EXAMPLE
		set allowed [::tcpwrappers::summarize "/etc/hosts.allow"]
		set denied  [::tcpwrappers::summarize "/etc/hosts.deny"]

		puts "hosts.allow:"
		foreach line $allowed {
			puts "  $line"
		}
		puts ""

		puts "hosts.deny:"
		foreach line $denied {
			puts "  $line"
		}

4. Adding an Entry
	SYNOPSIS
		::tcpwrappers::add <file> <service> <listOfNetworks> ?<comment>?

	DESCRIPTION
		This procedure adds an entry to the specified file for the
		given "service" and supplied list of networks ("listOfNetworks").
		Entries will only be added if an existing entry does not
		already exist for this service.  If a "comment" is specified
		a comment is added to the file.

	RETURN VALUE
		A list representing which networks were actually added for this
		service.

	EXAMPLE
		set added [::tcpwrappers::add "/etc/hosts.allow" sshd [list
1.2.3.0/24 2.3.4.0/24]]
		foreach add $added {
			puts "Added SSHd from $add"
		}

5. Removing an Entry
	SYNOPSIS
		::tcpwrappers::remove <file> <service> <listOfNetworks> ?<comment>?

	DESCRIPTION
		This procedure removes an entry from the specified file for the
		given "service" and supplied list of networks ("listOfNetworks").
		Any service entry that matches the service and has an address
		that falls completely within any of networks in the list of
		networks ("listOfNetworks") is removed (breaking the matching line
		into many lines if needed).  If the "comment" option is
		specified as true, the entry is commented out instead of
		completely removed.

	RETURN VALUE
		1 if sucessful (i.e., the resulting output does not have any
		entries for the given "service" and "listOfNetworks" tuples --
		even if no change was required to make this true), 0 otherwise.

	EXAMPLE
		set chk [::tcpwrappers::remove "/etc/hosts.allow" sshd [list 1.2.0.0/16]]
		if {!$chk} {
			puts stderr "WARNING: Unable to remove 1.2.0.0/16 from hosts.allow!"
		}

==============================================================================
NOTES ========================================================================
==============================================================================
At the current time, this package does not handle the "EXCEPT" operand.  Using
this package on files containing the "EXCEPT" operand will likely produce
undesirable results.
